import streamlit as st
from PIL import Image, ImageOps
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import transforms, models
from streamlit_drawable_canvas import st_canvas
from pathlib import Path


# --- 2. CSS FOR STYLING ---
st.markdown("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');

/* üåô Apply custom font only to main content (‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞ sidebar) /
div.block-container {
    font-family: 'Poppins', sans-serif;
    background-color: #1E1E1E;
    color: #FFFFFF;
}



/ Body /
html, body {
    background-color: #121212;
    color: #FFFFFF;
}

/ Headings /
h1, h2, h3 {
    color: #25D3D0;
}

/ Buttons /
div.stButton > button {
    background: linear-gradient(45deg, #25D3D0, #8A2BE2);
    color: white;
    border-radius: 25px;
    padding: 12px 25px;
    border: none;
    font-weight: 600;
    transition: all 0.3s ease;
    width: 100%;
    margin-top: 1rem;
    box-shadow: 0 4px 15px 0 rgba(45, 255, 255, 0.5);
}
div.stButton > button:hover {
    transform: scale(1.03);
    box-shadow: 0 6px 20px 0 rgba(45, 255, 255, 0.7);
}

/ Canvas /
[data-testid="stCanvas"] {
    margin: 0 !important;
    padding: 0 !important;
    display: flex;
    justify-content: center;
}
[data-testid="stCanvas"] > canvas {
    border-radius: 15px;
    border: 2px solid #25D3D0;
    background-color: #000000 !important;
}

/ Info box /
div[data-testid="stInfo"] {
    background-color: rgba(37, 211, 208, 0.1);
    border-radius: 10px;
    padding: 1rem;
}

/ Metric cards /
[data-testid="stMetricValue"], [data-testid="stMetricLabel"] {
    color: #25D3D0 !important;
}
</style>
""", unsafe_allow_html=True)



# --- 3. MODEL LOADING ---
@st.cache_resource
def load_pytorch_model():
    """
    ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• PyTorch ResNet18 ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
    """
    try:
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        model = models.resnet18(weights=None)
        model.conv1 = nn.Conv2d(1, 64, kernel_size=7, stride=2, padding=3, bias=False)
        model.fc = nn.Linear(model.fc.in_features, 2)
        model.to(device)

        ckpt = Path("resource/dogvscat/resnet18_dogcat_best.pth")
        if not ckpt.exists():
            st.error(f"üö® ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà: {ckpt}", icon="üö®")
            return None, None

        state = torch.load(ckpt, map_location=device)
        model.load_state_dict(state, strict=False)
        model.eval()
        
        return model, device
    except Exception as e:
        st.error(f"[ERROR] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ: {e}")
        return None, None

model, device = load_pytorch_model()
if model is None:
    st.error("üö® ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    st.stop()


# --- 4. IMAGE PROCESSING & HELPERS ---
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5], std=[0.5])
])

CLASS_NAMES = ["Cat üê±", "Dog üê∂"]

def process_and_predict(image_data: np.ndarray, model, device):
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å canvas, ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•, ‡πÅ‡∏•‡∏∞‡∏ó‡∏≤‡∏¢‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•
    """
    if image_data is None or image_data.max() == 0:
        return None, None, None

    pil_image = Image.fromarray(image_data.astype('uint8'), 'RGBA')
    pil_image_gray = pil_image.convert("L")
    pil_image_inverted = ImageOps.invert(pil_image_gray)
    
    image_tensor = transform(pil_image_inverted).unsqueeze(0).to(device)

    with torch.no_grad():
        outputs = model(image_tensor)
        probabilities = F.softmax(outputs, dim=1)[0]
        prediction_idx = torch.argmax(probabilities).item()
        confidence = probabilities[prediction_idx].item()
    
    predicted_class = CLASS_NAMES[prediction_idx]
    
    return predicted_class, confidence, pil_image_inverted


# --- 5. APP LAYOUT ---

# ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
st.title("üé® Drawing Classifier")
st.markdown("‡∏ß‡∏≤‡∏î‡∏£‡∏π‡∏õ **‡∏´‡∏°‡∏≤** üê∂ ‡∏´‡∏£‡∏∑‡∏≠ **‡πÅ‡∏°‡∏ß** üê± ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ AI ‡∏ó‡∏≤‡∏¢‡∏ú‡∏•!")
st.divider()

# --- Main Content ---
# ‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
canvas_col, result_col = st.columns([0.6, 0.4], gap="large")

with canvas_col:
    st.header("üé® ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏î‡∏£‡∏π‡∏õ")

    # ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
    stroke_width = st.slider("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô:", 1, 50, 15)
    drawing_mode = st.selectbox("‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î:", ("freedraw", "line", "rect", "circle", "transform"))
    
    # Canvas
    canvas_result = st_canvas(
        fill_color="rgba(255, 165, 0, 0.3)",
        stroke_width=stroke_width,
        stroke_color="#FFFFFF",
        background_color="#1E1E1E",
        update_streamlit=True,
        width=1000,
        height=500,
        drawing_mode=drawing_mode,
        key="canvas",
    )

    # ‡∏õ‡∏∏‡πà‡∏° Predict
    predict_button = st.button("‚ú® ‡∏ó‡∏≤‡∏¢‡∏ú‡∏•!", use_container_width=True)

with result_col:
    st.header("ü§ñ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")

    # ‡πÉ‡∏ä‡πâ div ‡∏ó‡∏µ‡πà‡∏°‡∏µ class="result-card" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î
    st.markdown('<div class="result-card">', unsafe_allow_html=True)

    if predict_button and canvas_result.image_data is not None:
        predicted_class, confidence, processed_image = process_and_predict(
            canvas_result.image_data, model, device
        )
        
        if predicted_class:
            st.markdown("‡∏â‡∏±‡∏ô‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô...")
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Badge
            st.markdown(f'<span class="prediction-badge">{predicted_class}</span>', unsafe_allow_html=True)
            st.metric(label="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à", value=f"{confidence:.2%}")
            
            st.divider()
            
            st.write("**‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß** (‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏´‡πá‡∏ô)")
            st.image(processed_image, use_column_width=True)
        else:
            st.warning("‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ß‡∏≤‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢‡∏ô‡∏∞ ü§î")
    else:
        st.info("‡∏ß‡∏≤‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏ó‡∏≤‡∏¢‡∏ú‡∏•' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà")
    
    st.markdown('</div>', unsafe_allow_html=True)
